package com.secondbrain.data.service.ai

import android.content.Context
import android.net.Uri
import android.util.Log
import com.secondbrain.data.repository.SettingsRepository
import com.secondbrain.data.service.ai.api.GeminiApiClient
import com.secondbrain.util.SecureStorage
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Implementation of AiProvider for Google's Gemini AI
 */
@Singleton
class GeminiProvider @Inject constructor(
    @ApplicationContext private val context: Context,
    private val settingsRepository: SettingsRepository,
    private val secureStorage: SecureStorage
) : AiProvider {

    companion object {
        private const val TAG = "GeminiProvider"
    }

    override val name: String = "Gemini"

    override val availableModels: List<AiModel> = listOf(
        AiModel(
            id = "gemini-pro",
            name = "Gemini Pro",
            capabilities = setOf(
                ModelCapability.TEXT_SUMMARIZATION,
                ModelCapability.TAG_GENERATION,
                ModelCapability.TITLE_GENERATION
            ),
            maxTokens = 32768,
            contextWindow = 32768
        ),
        AiModel(
            id = "gemini-pro-vision",
            name = "Gemini Pro Vision",
            capabilities = setOf(
                ModelCapability.TEXT_SUMMARIZATION,
                ModelCapability.IMAGE_UNDERSTANDING,
                ModelCapability.TAG_GENERATION,
                ModelCapability.TITLE_GENERATION
            ),
            maxTokens = 32768,
            contextWindow = 32768
        )
    )

    // API client
    private val apiClient = GeminiApiClient()

    // Get API key from secure storage
    private suspend fun getApiKey(): String? {
        return secureStorage.getString(SecureStorage.KEY_GEMINI_API_KEY)
    }

    override fun isConfigured(): Boolean {
        return secureStorage.containsKey(SecureStorage.KEY_GEMINI_API_KEY) &&
               secureStorage.getString(SecureStorage.KEY_GEMINI_API_KEY).isNotEmpty()
    }

    override suspend fun summarizeText(
        content: String,
        options: SummarizationOptions
    ): Result<String> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "Summarizing text with Gemini: ${content.take(100)}...")

            val apiKey = getApiKey()
            if (apiKey.isNullOrEmpty()) {
                return@withContext Result.failure(Exception("Gemini API key not configured"))
            }

            // Call the Gemini API client
            apiClient.summarizeText(content, options, apiKey)
        } catch (e: Exception) {
            Log.e(TAG, "Error summarizing text with Gemini", e)
            Result.failure(e)
        }
    }

    override suspend fun transcribeAudio(
        audioUri: Uri,
        options: TranscriptionOptions
    ): Result<String> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "Transcribing audio with Gemini: $audioUri")

            // In a real implementation, this would call the Gemini API
            // For now, we'll just return a placeholder transcription
            val apiKey = getApiKey()
            if (apiKey.isNullOrEmpty()) {
                return@withContext Result.failure(Exception("Gemini API key not configured"))
            }

            // Simulate API call
            val transcription = "This is a transcription of the audio file. It contains the spoken content converted to text format. [Generated by Gemini AI]"

            Result.success(transcription)
        } catch (e: Exception) {
            Log.e(TAG, "Error transcribing audio with Gemini", e)
            Result.failure(e)
        }
    }

    override suspend fun extractTextFromImage(
        imageUri: Uri,
        options: ExtractionOptions
    ): Result<String> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "Extracting text from image with Gemini: $imageUri")

            val apiKey = getApiKey()
            if (apiKey.isNullOrEmpty()) {
                return@withContext Result.failure(Exception("Gemini API key not configured"))
            }

            // Call the Gemini API client
            apiClient.extractTextFromImage(imageUri, options, apiKey, context)
        } catch (e: Exception) {
            Log.e(TAG, "Error extracting text from image with Gemini", e)
            Result.failure(e)
        }
    }

    override suspend fun generateTags(
        content: String,
        options: TagGenerationOptions
    ): Result<List<String>> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "Generating tags with Gemini: ${content.take(100)}...")

            val apiKey = getApiKey()
            if (apiKey.isNullOrEmpty()) {
                return@withContext Result.failure(Exception("Gemini API key not configured"))
            }

            // Call the Gemini API client
            apiClient.generateTags(content, options, apiKey)
        } catch (e: Exception) {
            Log.e(TAG, "Error generating tags with Gemini", e)
            Result.failure(e)
        }
    }

    override suspend fun generateTitle(
        content: String,
        options: TitleGenerationOptions
    ): Result<String> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "Generating title with Gemini: ${content.take(100)}...")

            val apiKey = getApiKey()
            if (apiKey.isNullOrEmpty()) {
                return@withContext Result.failure(Exception("Gemini API key not configured"))
            }

            // Call the Gemini API client
            apiClient.generateTitle(content, options, apiKey)
        } catch (e: Exception) {
            Log.e(TAG, "Error generating title with Gemini", e)
            Result.failure(e)
        }
    }
}
